# Metadata
author: Y-T-G
task: detect
keywords: [transformer, swin, bifpn, fpn, yolo11, small-object]
description: Corrected Swin-T backbone with YOLOv11 BiFPN neck for 7 blood-cell classes
min_version: 8.3.64

# Model
nc: 7
strides: [4, 8, 16, 32]  # P2, P3, P4, P5
scales:
  s: [1.00, 1.00, 1024]

# ---------------- Backbone (Corrected) ----------------
backbone:
  # The args now correctly match the TorchVision module's signature (model, weights, unwrap, truncate, split)
  - [-1, 1, TorchVision, ['swin_t', True, True, True, [0, 1, 2, 3]]]      # 0: Outputs [p2, p3, p4, p5] features

  # Extract, permute, and store each feature map
  - [0, 1, Index, [-1, 0]]                                    # 1: Extract P2 from output list
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]          # 2: P2 features (stride 4, 96ch)

  - [0, 1, Index, [-1, 1]]                                    # 3: Extract P3 from output list
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]          # 4: P3 features (stride 8, 192ch)

  - [0, 1, Index, [-1, 2]]                                    # 5: Extract P4 from output list
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]          # 6: P4 features (stride 16, 384ch)

  - [0, 1, Index, [-1, 3]]                                    # 7: Extract P5 from output list
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]          # 8: P5 features (stride 32, 768ch)
  - [-1, 1, SPPF, [768, 5]]                                   # 9: P5 features processed by SPPF

# ---------------- Neck (BiFPN - Reconnected) ----------------
head:
  # Top-Down Path
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]                 # 10: upsample P5(from layer 9)
  - [[-1, 6], 1, Concat, [1]]                                 # 11: concat with P4 (from layer 6)
  - [-1, 1, C3, [384, False]]                                 # 12: refine P4 (P4_td)

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]                 # 13: upsample P4_td(from layer 12)
  - [[-1, 4], 1, Concat, [1]]                                 # 14: concat with P3 (from layer 4)
  - [-1, 1, C3, [192, False]]                                 # 15: refine P3 (P3_td)

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]                 # 16: upsample P3_td(from layer 15)
  - [[-1, 2], 1, Concat, [1]]                                 # 17: concat with P2 (from layer 2)
  - [-1, 1, C3, [96, False]]                                  # 18: refine P2 (P2_out)

  # Bottom-Up Path (with BiFPN connections)
  - [-1, 1, Conv, [96, 3, 2]]                                 # 19: downsample P2_out(18)
  - [[-1, 15, 4], 1, Concat, [1]]                             # 20: BiFPN concat with P3_td(15) and P3_in(4)
  - [-1, 1, C3, [192, False]]                                 # 21: refine P3 (P3_out)

  - [-1, 1, Conv, [192, 3, 2]]                                # 22: downsample P3_out(21)
  - [[-1, 12, 6], 1, Concat, [1]]                             # 23: BiFPN concat with P4_td(12) and P4_in(6)
  - [-1, 1, C3, [384, False]]                                 # 24: refine P4 (P4_out)

  - [-1, 1, Conv, [384, 3, 2]]                                # 25: downsample P4_out(24)
  - [[-1, 9], 1, Concat, [1]]                                 # 26: concat with P5_processed(9)
  - [-1, 1, C3, [768, True]]                                  # 27: refine P5 (P5_out)

# ---------------- Head (Detect) ----------------
  # Predict on P2_out, P3_out, P4_out, P5_out
  - [[18, 21, 24, 27], 1, Detect, [nc]]                       # 28: Detect head
